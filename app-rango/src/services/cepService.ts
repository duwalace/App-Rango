/**
 * Servi√ßo de busca de CEP
 * Utiliza a API ViaCEP para buscar informa√ß√µes de endere√ßo
 */

export interface CepData {
  cep: string;
  logradouro: string; // rua
  complemento: string;
  bairro: string;
  localidade: string; // cidade
  uf: string; // estado
  erro?: boolean;
}

/**
 * Busca informa√ß√µes de endere√ßo pelo CEP
 * @param cep CEP a ser buscado (com ou sem formata√ß√£o)
 * @returns Dados do endere√ßo ou null se n√£o encontrado
 */
export const buscarCEP = async (cep: string): Promise<CepData | null> => {
  try {
    // Remove formata√ß√£o do CEP
    const cleanCep = cep.replace(/[^\d]/g, '');

    // Valida se tem 8 d√≠gitos
    if (cleanCep.length !== 8) {
      console.log('‚ùå CEP inv√°lido:', cleanCep);
      return null;
    }

    console.log('üîç Buscando CEP:', cleanCep);

    // Faz a requisi√ß√£o para a API ViaCEP
    const response = await fetch(`https://viacep.com.br/ws/${cleanCep}/json/`);
    
    if (!response.ok) {
      console.log('‚ùå Erro na resposta da API:', response.status);
      return null;
    }

    const data: CepData = await response.json();

    // Verifica se o CEP foi encontrado
    if (data.erro) {
      console.log('‚ùå CEP n√£o encontrado:', cleanCep);
      return null;
    }

    console.log('‚úÖ CEP encontrado:', data);
    return data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar CEP:', error);
    return null;
  }
};

/**
 * Valida se o CEP existe
 * @param cep CEP a ser validado
 * @returns true se o CEP existe, false caso contr√°rio
 */
export const validarCEP = async (cep: string): Promise<boolean> => {
  const data = await buscarCEP(cep);
  return data !== null && !data.erro;
};

