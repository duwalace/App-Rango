rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==========================================
    // FUNÇÕES HELPER
    // ==========================================
    
    // Verificar se usuário está autenticado
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Verificar se é o próprio usuário
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    // Buscar dados do usuário atual
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Verificar se usuário é dono de uma loja específica
    function isStoreOwner(storeId) {
      return isSignedIn() && 
             getUserData().role == 'dono_da_loja' && 
             getUserData().storeId == storeId;
    }
    
    // Verificar se é administrador
    function isAdmin() {
      return isSignedIn() && getUserData().role == 'admin';
    }
    
    // Verificar se é entregador
    function isDeliveryPerson() {
      return isSignedIn() && getUserData().role == 'entregador';
    }
    
    // ==========================================
    // COLEÇÃO: users
    // ==========================================
    match /users/{userId} {
      // Qualquer pessoa AUTENTICADA pode ler perfis (necessário para exibir nomes)
      allow read: if isSignedIn();
      
      // Criar: apenas durante signup (próprio UID)
      allow create: if request.auth.uid == userId;
      
      // Atualizar/Deletar: apenas próprio usuário ou admin
      allow update, delete: if isOwner(userId) || isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: stores
    // ==========================================
    match /stores/{storeId} {
      // Leitura pública (necessário para clientes verem restaurantes)
      allow read: if true;
      
      // Criar: apenas usuários autenticados
      allow create: if isSignedIn();
      
      // Atualizar/Deletar: apenas dono da loja ou admin
      allow update, delete: if isStoreOwner(storeId) || isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: menuCategories
    // ==========================================
    match /menuCategories/{categoryId} {
      // Leitura pública (clientes precisam ver categorias)
      allow read: if true;
      
      // Escrita: apenas dono da loja correspondente
      allow create: if isSignedIn() && isStoreOwner(request.resource.data.storeId);
      allow update, delete: if isSignedIn() && (
        isStoreOwner(resource.data.storeId) || isAdmin()
      );
    }
    
    // ==========================================
    // COLEÇÃO: menuItems
    // ==========================================
    match /menuItems/{itemId} {
      // Leitura pública
      allow read: if true;
      
      // Criar: apenas dono da loja
      allow create: if isSignedIn() && isStoreOwner(request.resource.data.storeId);
      
      // Atualizar/Deletar: apenas dono da loja ou admin
      allow update, delete: if isSignedIn() && (
        isStoreOwner(resource.data.storeId) || isAdmin()
      );
    }
    
    // ==========================================
    // COLEÇÃO: orders
    // ==========================================
    match /orders/{orderId} {
      // Leitura: 
      // - Cliente vê seus próprios pedidos
      // - Loja vê pedidos feitos nela
      // - Entregador vê pedidos atribuídos a ele
      // - Admin vê tudo
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.customerId ||
        getUserData().storeId == resource.data.storeId ||
        request.auth.uid == resource.data.deliveryPersonId ||
        isAdmin()
      );
      
      // Criar: apenas cliente autenticado criando pedido para si mesmo
      allow create: if isSignedIn() && 
                       request.auth.uid == request.resource.data.customerId &&
                       request.resource.data.status == 'pending';
      
      // Atualizar:
      // - Dono da loja pode atualizar status e atribuir entregador
      // - Cliente pode cancelar (apenas se status for 'pending')
      // - Entregador pode atualizar status de entrega
      allow update: if isSignedIn() && (
        // Loja pode atualizar
        (isStoreOwner(resource.data.storeId) && 
         request.resource.data.customerId == resource.data.customerId) ||
        
        // Cliente pode cancelar se ainda pendente
        (request.auth.uid == resource.data.customerId && 
         resource.data.status == 'pending' && 
         request.resource.data.status == 'cancelled') ||
        
        // Entregador pode atualizar status de entrega
        (isDeliveryPerson() && 
         request.auth.uid == resource.data.deliveryPersonId &&
         request.resource.data.status in ['in_delivery', 'delivered']) ||
        
        // Admin pode tudo
        isAdmin()
      );
      
      // Deletar: apenas admin (manter histórico)
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: delivery_partners
    // ==========================================
    match /delivery_partners/{partnerId} {
      // Leitura: 
      // - Próprio entregador vê seus dados
      // - Lojas veem entregador atribuído ao seu pedido
      // - Admin vê tudo
      allow read: if isSignedIn() && (
        getUserData().uid == resource.data.userId ||
        isAdmin() ||
        // Loja vê entregador do seu pedido (validar via order)
        (getUserData().role == 'dono_da_loja' && 
         exists(/databases/$(database)/documents/orders/$(getUserData().storeId + '_' + partnerId)))
      );
      
      // Criar: apenas durante signup (próprio UID)
      allow create: if isSignedIn() && 
                       request.auth.uid == request.resource.data.userId;
      
      // Atualizar: 
      // - Próprio entregador pode atualizar location e operational_status
      // - Admin pode atualizar tudo
      allow update: if isSignedIn() && (
        // Entregador atualiza apenas campos permitidos
        (getUserData().uid == resource.data.userId && 
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['current_location', 'last_location_update', 'operational_status', 'current_order_id', 'last_login', 'metadata'])) ||
        // Admin pode atualizar tudo
        isAdmin()
      );
      
      // Deletar: apenas admin
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: delivery_offers
    // ==========================================
    match /delivery_offers/{offerId} {
      // Leitura:
      // - Entregadores veem ofertas que estão no visible_to_partners
      // - Loja vê ofertas de seus pedidos
      // - Admin vê tudo
      allow read: if isSignedIn() && (
        request.auth.uid in resource.data.visible_to_partners ||
        getUserData().storeId == resource.data.store_id ||
        isAdmin()
      );
      
      // Criar: apenas via Cloud Function ou Admin
      allow create: if isAdmin();
      
      // Atualizar:
      // - Entregador pode aceitar oferta (mudar status para accepted)
      // - Cloud Function/Admin pode atualizar tudo
      allow update: if isSignedIn() && (
        // Entregador aceita oferta
        (request.auth.uid in resource.data.visible_to_partners &&
         resource.data.status == 'open' &&
         request.resource.data.status == 'accepted' &&
         request.resource.data.accepted_by == request.auth.uid) ||
        // Admin
        isAdmin()
      );
      
      // Deletar: apenas admin
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: delivery_earnings
    // ==========================================
    match /delivery_earnings/{earningId} {
      // Leitura: apenas próprio entregador e admin
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.partner_id ||
        isAdmin()
      );
      
      // Criar/Atualizar/Deletar: apenas Cloud Function ou Admin
      allow create, update, delete: if isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: delivery_zones
    // ==========================================
    match /delivery_zones/{zoneId} {
      // Leitura: todos (necessário para calcular fees)
      allow read: if true;
      
      // Escrita: apenas admin
      allow create, update, delete: if isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: withdrawal_requests
    // ==========================================
    match /withdrawal_requests/{requestId} {
      // Leitura: próprio entregador e admin
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.partner_id ||
        isAdmin()
      );
      
      // Criar: próprio entregador
      allow create: if isSignedIn() && 
                       request.auth.uid == request.resource.data.partner_id &&
                       request.resource.data.status == 'pending';
      
      // Atualizar: apenas admin (processar saque)
      allow update: if isAdmin();
      
      // Deletar: apenas admin
      allow delete: if isAdmin();
    }
    
    // ==========================================
    // COLEÇÃO: delivery_ratings
    // ==========================================
    match /delivery_ratings/{ratingId} {
      // Leitura: cliente que criou, entregador avaliado, admin
      allow read: if isSignedIn() && (
        request.auth.uid == resource.data.customer_id ||
        request.auth.uid == resource.data.partner_id ||
        isAdmin()
      );
      
      // Criar: apenas cliente do pedido
      allow create: if isSignedIn() && 
                       request.auth.uid == request.resource.data.customer_id;
      
      // Atualizar/Deletar: apenas admin
      allow update, delete: if isAdmin();
    }
    
    // ==========================================
    // BLOQUEIO PADRÃO
    // ==========================================
    // Qualquer coleção não especificada: BLOQUEADA
    match /{document=**} {
      allow read, write: if false;
    }
  }
}